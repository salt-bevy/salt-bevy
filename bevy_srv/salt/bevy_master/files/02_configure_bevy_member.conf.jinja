{#- this is the jinja template used to create the configuration file
     <salt_config_directory>/minion.d/02_configure_bevy_member.conf-#}
# {{ pillar['salt_managed_message'] }}
# created from template bevy_master/files/02_configure_bevy_member.conf.jinja (0.2)

# these settings are specific to the running Salt master or stand-alone minion

{% set bevy_root = salt['config.get']('bevy_root', '/projects/salt-bevy/bevy_srv') %}
id: {{ salt['config.get']('node_name', salt['config.get']('id')) }}
{% set is_master = salt['config.get']('id').startswith('bevymaster') or
    salt['config.get']('bevy') == 'local' %}

{% if is_master %}master: localhost
{% else %}
master: {{ salt['config.get']('my_master_url', salt['config.get']('master')) }}
{% endif %}
{% set minion_number = salt['config.get']('additional_minion_tag') or '' %}

salt_config_directory: {{ salt['config.get']('salt_config_directory') }}  # remember where I am at
additional_minion_tag: '{{ minion_number }}'

use_superseded:  # feature flags
  - module.run   # permit use of the new syntax for module.run states

{% if is_master -%}
{% if salt['pillar.get']('autosign_minion_ids', false) %}
{# This quick and dirty way to pre-accept minions with known names is insecure. #}
autosign_file: {{ salt['config.get']('salt_config_directory') }}/pki/master/autosign.minions
{% endif %}
winrepo_remotes: []  # do not support Windows minions before salt v2015.8
timeout: 20  # give Windows minions more time to respond (default was 5 seconds).
{% endif -%}

{% if minion_number != '' %}
pidfile: /var/run/salt-minion{{ minion_number }}.pid  # settings for second minion
pki_dir: {{ salt['config.get']('salt_config_directory') }}/pki/minion{{ minion_number }}
sock_dir: /var/run/salt-minion{{ minion_number }}
log_file: /var/log/salt/minion{{ minion_number }}
{% endif %}

worker_threads: 2  {# sufficient for test systems #}

mine_interval: 5   # this is a test system, so run the mine every five minutes

{% if is_master or salt['file.directory_exists']('/srv/salt') %}
# for master we need to tell Salt where to find its files
#
file_roots:    # search this list of directory entries in order
  base:
    - /srv/salt         # first, use the normal place (if it exists)
    {%- for entry in salt['pillar.get']('application_roots', []) %}
    {%- set appdir = entry.split('=') %}
    {%- if appdir|length > 1 and salt['grains.get']('virtual', 'physical') == 'VirtualBox' %}
    - /projects/{{ appdir[1] }}/salt
    {%- else %}
    - {{ appdir[0] }}/salt
    {%- endif %}
    {%- endfor %}
    - '{{ bevy_root }}/salt'
top_file_merging_strategy: same  # do not merge the top.sls file from srv/salt

pillar_roots:  # merge definitions from this list of directories
  base:
    - /srv/pillar
    {%- for entry in salt['pillar.get']('application_roots', []) %}
    {%- set appdir = entry.split('=') %}
    {%- if appdir|length > 1 and salt['grains.get']('virtual', 'physical') == 'VirtualBox' %}
    - /projects/{{ appdir[1] }}/pillar
    {%- else %}
    - {{ appdir[0] }}/pillar
    {%- endif %}
    {%- endfor %}
    - '{{ bevy_root }}/pillar'
pillar_source_merging_strategy: recurse
{% endif %} {# is_master or ... #}
file_ignore_regex:
  - '/\.git($|/)'
